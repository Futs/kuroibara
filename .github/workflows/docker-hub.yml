name: Docker Hub Release

on:
  push:
    branches: [main]
    tags: ['v*']
  release:
    types: [published]

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_USERNAME: futs

jobs:
  # Wait for main CI tests to pass before building images
  wait-for-tests:
    name: Wait for Tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Wait for CI tests
        uses: lewagon/wait-on-check-action@v1.3.4
        with:
          ref: ${{ github.sha }}
          check-name: 'Backend Tests'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 30
          
      - name: Wait for Code Quality
        uses: lewagon/wait-on-check-action@v1.3.4
        with:
          ref: ${{ github.sha }}
          check-name: 'Code Quality'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 30

  # Generate version information for main branch (waits for tests)
  versioning-main:
    name: Generate Version (Main)
    runs-on: ubuntu-latest
    needs: [wait-for-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_release: ${{ steps.version.outputs.is_release }}
      docker_tags: ${{ steps.version.outputs.docker_tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate version and tags
        id: version
        run: |
          chmod +x ./version.sh
          VERSION=$(QUIET=true ./version.sh current)
          IS_RELEASE="false"
          DOCKER_TAGS="latest,${VERSION}"

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_release=$IS_RELEASE" >> $GITHUB_OUTPUT
          echo "docker_tags=$DOCKER_TAGS" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"
          echo "Docker tags: $DOCKER_TAGS"

  # Generate version information for tags (no test dependency)
  versioning-tags:
    name: Generate Version (Tags)
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'release'
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_release: ${{ steps.version.outputs.is_release }}
      docker_tags: ${{ steps.version.outputs.docker_tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate version and tags
        id: version
        run: |
          chmod +x ./version.sh

          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION="${{ github.ref_name }}"
            IS_RELEASE="true"
            # Remove 'v' prefix for Docker tags
            CLEAN_VERSION=${VERSION#v}
            DOCKER_TAGS="latest,${CLEAN_VERSION},${VERSION}"
          elif [[ "${{ github.event_name }}" == "release" ]]; then
            VERSION="${{ github.event.release.tag_name }}"
            IS_RELEASE="true"
            CLEAN_VERSION=${VERSION#v}
            DOCKER_TAGS="latest,${CLEAN_VERSION},${VERSION}"
          else
            VERSION="dev"
            IS_RELEASE="false"
            DOCKER_TAGS="dev"
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_release=$IS_RELEASE" >> $GITHUB_OUTPUT
          echo "docker_tags=$DOCKER_TAGS" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"
          echo "Docker tags: $DOCKER_TAGS"


  # Build and push backend image
  build-backend:
    name: Build Backend Image
    runs-on: ubuntu-latest
    needs: [versioning-main, versioning-tags]
    if: always() && (needs.versioning-main.result == 'success' || needs.versioning-tags.result == 'success')
    # Remove environment protection for automatic tag deployment
    # environment:
    #   name: ${{ needs.versioning.outputs.is_release == 'true' && 'production' || 'staging' }}
    #   url: https://hub.docker.com/r/futs/kuroibara-backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine version
        id: version
        run: |
          if [[ "${{ needs.versioning-main.result }}" == "success" ]]; then
            echo "version=${{ needs.versioning-main.outputs.version }}" >> $GITHUB_OUTPUT
            echo "is_release=${{ needs.versioning-main.outputs.is_release }}" >> $GITHUB_OUTPUT
            echo "docker_tags=${{ needs.versioning-main.outputs.docker_tags }}" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.versioning-tags.result }}" == "success" ]]; then
            echo "version=${{ needs.versioning-tags.outputs.version }}" >> $GITHUB_OUTPUT
            echo "is_release=${{ needs.versioning-tags.outputs.is_release }}" >> $GITHUB_OUTPUT
            echo "docker_tags=${{ needs.versioning-tags.outputs.docker_tags }}" >> $GITHUB_OUTPUT
          else
            echo "No versioning job succeeded"
            exit 1
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_USERNAME }}/kuroibara-backend
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ steps.version.outputs.version }}
            type=ref,event=tag
          labels: |
            org.opencontainers.image.title=Kuroibara Backend
            org.opencontainers.image.description=Kuroibara manga management backend
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}

      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=backend
          cache-to: type=gha,mode=max,scope=backend
          build-args: |
            VERSION=${{ steps.version.outputs.version }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            GIT_SHA=${{ github.sha }}

  # Build and push frontend image
  build-frontend:
    name: Build Frontend Image
    runs-on: ubuntu-latest
    needs: [versioning-main, versioning-tags]
    if: always() && (needs.versioning-main.result == 'success' || needs.versioning-tags.result == 'success')
    # Remove environment protection for automatic tag deployment
    # environment:
    #   name: ${{ needs.versioning.outputs.is_release == 'true' && 'production' || 'staging' }}
    #   url: https://hub.docker.com/r/futs/kuroibara-frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine version
        id: version
        run: |
          if [[ "${{ needs.versioning-main.result }}" == "success" ]]; then
            echo "version=${{ needs.versioning-main.outputs.version }}" >> $GITHUB_OUTPUT
            echo "is_release=${{ needs.versioning-main.outputs.is_release }}" >> $GITHUB_OUTPUT
            echo "docker_tags=${{ needs.versioning-main.outputs.docker_tags }}" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.versioning-tags.result }}" == "success" ]]; then
            echo "version=${{ needs.versioning-tags.outputs.version }}" >> $GITHUB_OUTPUT
            echo "is_release=${{ needs.versioning-tags.outputs.is_release }}" >> $GITHUB_OUTPUT
            echo "docker_tags=${{ needs.versioning-tags.outputs.docker_tags }}" >> $GITHUB_OUTPUT
          else
            echo "No versioning job succeeded"
            exit 1
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_USERNAME }}/kuroibara-frontend
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ steps.version.outputs.version }}
            type=ref,event=tag
          labels: |
            org.opencontainers.image.title=Kuroibara Frontend
            org.opencontainers.image.description=Kuroibara manga management frontend
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=frontend
          cache-to: type=gha,mode=max,scope=frontend
          build-args: |
            VERSION=${{ steps.version.outputs.version }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            GIT_SHA=${{ github.sha }}

  # Notify on completion
  notify-completion:
    name: Notify Completion
    runs-on: ubuntu-latest
    needs: [versioning-main, versioning-tags, build-backend, build-frontend]
    if: always()
    
    steps:
      - name: Determine version for notification
        id: version
        run: |
          if [[ "${{ needs.versioning-main.result }}" == "success" ]]; then
            echo "version=${{ needs.versioning-main.outputs.version }}" >> $GITHUB_OUTPUT
            echo "docker_tags=${{ needs.versioning-main.outputs.docker_tags }}" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.versioning-tags.result }}" == "success" ]]; then
            echo "version=${{ needs.versioning-tags.outputs.version }}" >> $GITHUB_OUTPUT
            echo "docker_tags=${{ needs.versioning-tags.outputs.docker_tags }}" >> $GITHUB_OUTPUT
          else
            echo "version=unknown" >> $GITHUB_OUTPUT
            echo "docker_tags=unknown" >> $GITHUB_OUTPUT
          fi

      - name: Success notification
        if: needs.build-backend.result == 'success' && needs.build-frontend.result == 'success'
        run: |
          echo "🎉 Docker images successfully built and pushed!"
          echo "📦 Backend: ${{ env.DOCKER_USERNAME }}/kuroibara-backend:${{ steps.version.outputs.version }}"
          echo "📦 Frontend: ${{ env.DOCKER_USERNAME }}/kuroibara-frontend:${{ steps.version.outputs.version }}"
          echo "🏷️  Tags: ${{ steps.version.outputs.docker_tags }}"
          
      - name: Failure notification
        if: needs.build-backend.result == 'failure' || needs.build-frontend.result == 'failure'
        run: |
          echo "❌ Docker image build failed!"
          echo "Backend status: ${{ needs.build-backend.result }}"
          echo "Frontend status: ${{ needs.build-frontend.result }}"
          exit 1
