"""Add MangaUpdates specific models

Revision ID: e1684e1a82ec
Revises: 016
Create Date: 2025-08-24 16:24:35.758311

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'e1684e1a82ec'
down_revision = '016'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('bookmark')
    op.drop_index(op.f('ix_manga_external_id'), table_name='manga')
    op.drop_index(op.f('ix_manga_provider'), table_name='manga')
    op.drop_index(op.f('ix_manga_title'), table_name='manga')
    op.drop_table('manga')
    op.drop_table('reading_progress')
    op.drop_table('cross_indexer_references')
    op.drop_table('organization_history')
    op.drop_table('universal_manga_mappings')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_table('users')
    op.drop_table('manga_author')
    op.drop_table('download_clients')
    op.drop_index(op.f('ix_mangaupdates_entries_mu_series_id'), table_name='mangaupdates_entries')
    op.drop_index(op.f('ix_mangaupdates_entries_title'), table_name='mangaupdates_entries')
    op.drop_table('mangaupdates_entries')
    op.drop_table('downloads')
    op.drop_table('page')
    op.drop_table('external_integrations')
    op.drop_table('manga_metadata')
    op.drop_index(op.f('idx_progress_events_operation_timestamp'), table_name='progress_events')
    op.drop_index(op.f('idx_progress_events_session_timestamp'), table_name='progress_events')
    op.drop_index(op.f('idx_progress_events_type_timestamp'), table_name='progress_events')
    op.drop_index(op.f('idx_progress_events_user_timestamp'), table_name='progress_events')
    op.drop_index(op.f('ix_progress_events_event_type'), table_name='progress_events')
    op.drop_index(op.f('ix_progress_events_operation_id'), table_name='progress_events')
    op.drop_index(op.f('ix_progress_events_session_id'), table_name='progress_events')
    op.drop_index(op.f('ix_progress_events_timestamp'), table_name='progress_events')
    op.drop_index(op.f('ix_progress_events_user_id'), table_name='progress_events')
    op.drop_table('progress_events')
    op.drop_index(op.f('ix_chapter_download_status'), table_name='chapter')
    op.drop_index(op.f('ix_chapter_external_id'), table_name='chapter')
    op.drop_table('chapter')
    op.drop_table('external_manga_mappings')
    op.drop_table('organization_jobs')
    op.drop_table('manga_user_library_category')
    op.drop_index(op.f('ix_genre_name'), table_name='genre')
    op.drop_table('genre')
    op.drop_table('user_provider_preferences')
    op.drop_table('mangaupdates_mappings')
    op.drop_index(op.f('ix_provider_status_provider_id'), table_name='provider_status')
    op.drop_table('provider_status')
    op.drop_table('indexers')
    op.drop_table('reading_list_manga')
    op.drop_index(op.f('idx_progress_operations_last_update'), table_name='progress_operations')
    op.drop_index(op.f('idx_progress_operations_session_status'), table_name='progress_operations')
    op.drop_index(op.f('idx_progress_operations_started_at'), table_name='progress_operations')
    op.drop_index(op.f('idx_progress_operations_type_status'), table_name='progress_operations')
    op.drop_index(op.f('idx_progress_operations_user_status'), table_name='progress_operations')
    op.drop_index(op.f('ix_progress_operations_completed_at'), table_name='progress_operations')
    op.drop_index(op.f('ix_progress_operations_last_update'), table_name='progress_operations')
    op.drop_index(op.f('ix_progress_operations_operation_type'), table_name='progress_operations')
    op.drop_index(op.f('ix_progress_operations_parent_operation_id'), table_name='progress_operations')
    op.drop_index(op.f('ix_progress_operations_session_id'), table_name='progress_operations')
    op.drop_index(op.f('ix_progress_operations_started_at'), table_name='progress_operations')
    op.drop_index(op.f('ix_progress_operations_status'), table_name='progress_operations')
    op.drop_index(op.f('ix_progress_operations_user_id'), table_name='progress_operations')
    op.drop_table('progress_operations')
    op.drop_index(op.f('ix_category_name'), table_name='category')
    op.drop_table('category')
    op.drop_index(op.f('ix_author_name'), table_name='author')
    op.drop_table('author')
    op.drop_table('manga_user_library')
    op.drop_table('chapter_metadata')
    op.drop_index(op.f('ix_universal_manga_entries_source_id'), table_name='universal_manga_entries')
    op.drop_index(op.f('ix_universal_manga_entries_source_indexer'), table_name='universal_manga_entries')
    op.drop_index(op.f('ix_universal_manga_entries_title'), table_name='universal_manga_entries')
    op.drop_table('universal_manga_entries')
    op.drop_table('reading_list')
    op.drop_table('manga_genre')
    op.drop_index(op.f('idx_progress_sessions_last_activity'), table_name='progress_sessions')
    op.drop_index(op.f('idx_progress_sessions_user_active'), table_name='progress_sessions')
    op.drop_index(op.f('ix_progress_sessions_created_at'), table_name='progress_sessions')
    op.drop_index(op.f('ix_progress_sessions_is_active'), table_name='progress_sessions')
    op.drop_index(op.f('ix_progress_sessions_last_activity'), table_name='progress_sessions')
    op.drop_index(op.f('ix_progress_sessions_user_id'), table_name='progress_sessions')
    op.drop_table('progress_sessions')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('progress_sessions',
    sa.Column('id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('last_activity', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('client_info', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('session_metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('progress_sessions_pkey'))
    )
    op.create_index(op.f('ix_progress_sessions_user_id'), 'progress_sessions', ['user_id'], unique=False)
    op.create_index(op.f('ix_progress_sessions_last_activity'), 'progress_sessions', ['last_activity'], unique=False)
    op.create_index(op.f('ix_progress_sessions_is_active'), 'progress_sessions', ['is_active'], unique=False)
    op.create_index(op.f('ix_progress_sessions_created_at'), 'progress_sessions', ['created_at'], unique=False)
    op.create_index(op.f('idx_progress_sessions_user_active'), 'progress_sessions', ['user_id', 'is_active'], unique=False)
    op.create_index(op.f('idx_progress_sessions_last_activity'), 'progress_sessions', ['last_activity'], unique=False)
    op.create_table('manga_genre',
    sa.Column('manga_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('genre_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['genre_id'], ['genre.id'], name=op.f('manga_genre_genre_id_fkey')),
    sa.ForeignKeyConstraint(['manga_id'], ['manga.id'], name=op.f('manga_genre_manga_id_fkey')),
    sa.PrimaryKeyConstraint('manga_id', 'genre_id', name=op.f('manga_genre_pkey'))
    )
    op.create_table('reading_list',
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_public', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='reading_list_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='reading_list_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('universal_manga_entries',
    sa.Column('source_indexer', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('source_id', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('source_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('alternative_titles', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('cover_image_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('year', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('completed_year', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_nsfw', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('content_rating', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('demographic', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('genres', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('themes', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('categories', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('authors', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('artists', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('publishers', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('rating', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('rating_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('popularity_rank', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('follows', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('latest_chapter', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('total_chapters', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('confidence_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('data_completeness', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('last_refreshed', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('refresh_interval_hours', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('auto_refresh_enabled', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('raw_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='universal_manga_entries_pkey'),
    sa.UniqueConstraint('source_indexer', 'source_id', name='uq_source_indexer_id', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_universal_manga_entries_title'), 'universal_manga_entries', ['title'], unique=False)
    op.create_index(op.f('ix_universal_manga_entries_source_indexer'), 'universal_manga_entries', ['source_indexer'], unique=False)
    op.create_index(op.f('ix_universal_manga_entries_source_id'), 'universal_manga_entries', ['source_id'], unique=False)
    op.create_table('chapter_metadata',
    sa.Column('chapter_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('display_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('custom_cover_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('is_organized', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('organized_path', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('original_path', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('cbz_path', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('current_page', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('total_pages', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('reading_progress', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('last_read_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_completed', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('custom_metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['chapter_id'], ['chapter.id'], name=op.f('chapter_metadata_chapter_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('chapter_metadata_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('chapter_metadata_pkey')),
    sa.UniqueConstraint('chapter_id', name=op.f('chapter_metadata_chapter_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('manga_user_library',
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('manga_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('custom_title', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('custom_cover', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_favorite', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('rating', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('is_downloaded', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('download_path', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['manga_id'], ['manga.id'], name='manga_user_library_manga_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='manga_user_library_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='manga_user_library_pkey'),
    sa.UniqueConstraint('user_id', 'manga_id', name='uq_manga_user_library_user_manga', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('author',
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('alternative_names', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('biography', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='author_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_author_name'), 'author', ['name'], unique=False)
    op.create_table('category',
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('color', sa.VARCHAR(length=7), autoincrement=False, nullable=True),
    sa.Column('icon', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('is_default', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='category_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='category_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_category_name'), 'category', ['name'], unique=False)
    op.create_table('progress_operations',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('operation_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('progress_percentage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('current_step', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('total_steps', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('current_step_number', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('estimated_completion', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_update', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('warning_messages', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('operation_metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('session_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('parent_operation_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('total_items', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('processed_items', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('successful_items', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('failed_items', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_cancellable', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('cancellation_token', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['parent_operation_id'], ['progress_operations.id'], name='progress_operations_parent_operation_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='progress_operations_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_progress_operations_user_id'), 'progress_operations', ['user_id'], unique=False)
    op.create_index(op.f('ix_progress_operations_status'), 'progress_operations', ['status'], unique=False)
    op.create_index(op.f('ix_progress_operations_started_at'), 'progress_operations', ['started_at'], unique=False)
    op.create_index(op.f('ix_progress_operations_session_id'), 'progress_operations', ['session_id'], unique=False)
    op.create_index(op.f('ix_progress_operations_parent_operation_id'), 'progress_operations', ['parent_operation_id'], unique=False)
    op.create_index(op.f('ix_progress_operations_operation_type'), 'progress_operations', ['operation_type'], unique=False)
    op.create_index(op.f('ix_progress_operations_last_update'), 'progress_operations', ['last_update'], unique=False)
    op.create_index(op.f('ix_progress_operations_completed_at'), 'progress_operations', ['completed_at'], unique=False)
    op.create_index(op.f('idx_progress_operations_user_status'), 'progress_operations', ['user_id', 'status'], unique=False)
    op.create_index(op.f('idx_progress_operations_type_status'), 'progress_operations', ['operation_type', 'status'], unique=False)
    op.create_index(op.f('idx_progress_operations_started_at'), 'progress_operations', ['started_at'], unique=False)
    op.create_index(op.f('idx_progress_operations_session_status'), 'progress_operations', ['session_id', 'status'], unique=False)
    op.create_index(op.f('idx_progress_operations_last_update'), 'progress_operations', ['last_update'], unique=False)
    op.create_table('reading_list_manga',
    sa.Column('reading_list_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('manga_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['manga_id'], ['manga.id'], name=op.f('reading_list_manga_manga_id_fkey')),
    sa.ForeignKeyConstraint(['reading_list_id'], ['reading_list.id'], name=op.f('reading_list_manga_reading_list_id_fkey')),
    sa.PrimaryKeyConstraint('reading_list_id', 'manga_id', name=op.f('reading_list_manga_pkey'))
    )
    op.create_table('indexers',
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('indexer_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('implementation', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('base_url', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('api_key', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('username', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('password', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('supports_search', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('supports_rss', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('settings', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_enabled', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('priority', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('last_test', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('is_healthy', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('requests_per_day', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('requests_today', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('last_request_reset', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('indexers_pkey'))
    )
    op.create_table('provider_status',
    sa.Column('provider_id', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('provider_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('provider_url', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('last_check', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('response_time', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('consecutive_failures', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('total_checks', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('successful_checks', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('uptime_percentage', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_enabled', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('check_interval', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('max_consecutive_failures', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('provider_status_pkey'))
    )
    op.create_index(op.f('ix_provider_status_provider_id'), 'provider_status', ['provider_id'], unique=True)
    op.create_table('mangaupdates_mappings',
    sa.Column('manga_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('mu_entry_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('confidence_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('mapping_source', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('verified_by_user', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['manga_id'], ['manga.id'], name=op.f('mangaupdates_mappings_manga_id_fkey')),
    sa.ForeignKeyConstraint(['mu_entry_id'], ['mangaupdates_entries.id'], name=op.f('mangaupdates_mappings_mu_entry_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('mangaupdates_mappings_pkey'))
    )
    op.create_table('user_provider_preferences',
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('provider_id', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('is_favorite', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('priority_order', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_enabled', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('user_provider_preferences_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('user_provider_preferences_pkey')),
    sa.UniqueConstraint('user_id', 'provider_id', name=op.f('uq_user_provider'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('genre',
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('genre_pkey'))
    )
    op.create_index(op.f('ix_genre_name'), 'genre', ['name'], unique=True)
    op.create_table('manga_user_library_category',
    sa.Column('manga_user_library_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('category_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['category.id'], name=op.f('manga_user_library_category_category_id_fkey')),
    sa.ForeignKeyConstraint(['manga_user_library_id'], ['manga_user_library.id'], name=op.f('manga_user_library_category_manga_user_library_id_fkey')),
    sa.PrimaryKeyConstraint('manga_user_library_id', 'category_id', name=op.f('manga_user_library_category_pkey'))
    )
    op.create_table('organization_jobs',
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('job_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('job_status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('total_items', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('processed_items', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('successful_items', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('failed_items', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('job_config', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('naming_format_manga', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('naming_format_chapter', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('estimated_completion', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('result_summary', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('error_log', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('organization_jobs_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('organization_jobs_pkey'))
    )
    op.create_table('external_manga_mappings',
    sa.Column('integration_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('manga_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('external_manga_id', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('external_title', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('external_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('last_synced_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('sync_status', postgresql.ENUM('PENDING', 'IN_PROGRESS', 'SUCCESS', 'FAILED', 'DISABLED', name='syncstatus'), autoincrement=False, nullable=False),
    sa.Column('sync_error', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('external_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['integration_id'], ['external_integrations.id'], name=op.f('external_manga_mappings_integration_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['manga_id'], ['manga.id'], name=op.f('external_manga_mappings_manga_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('external_manga_mappings_pkey')),
    sa.UniqueConstraint('integration_id', 'external_manga_id', name=op.f('uq_integration_external_manga'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('integration_id', 'manga_id', name=op.f('uq_integration_manga'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('chapter',
    sa.Column('manga_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('number', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('volume', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('language', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('pages_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('file_path', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('file_size', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('source', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('publish_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('readable_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('download_status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('download_error', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('external_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('provider_external_ids', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('fallback_providers', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['manga_id'], ['manga.id'], name='chapter_manga_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='chapter_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_chapter_external_id'), 'chapter', ['external_id'], unique=False)
    op.create_index(op.f('ix_chapter_download_status'), 'chapter', ['download_status'], unique=False)
    op.create_table('progress_events',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('operation_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('event_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('progress_percentage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('current_step', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('total_steps', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('current_step_number', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('warning_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('event_metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('estimated_completion', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('session_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['operation_id'], ['progress_operations.id'], name=op.f('progress_events_operation_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('progress_events_pkey'))
    )
    op.create_index(op.f('ix_progress_events_user_id'), 'progress_events', ['user_id'], unique=False)
    op.create_index(op.f('ix_progress_events_timestamp'), 'progress_events', ['timestamp'], unique=False)
    op.create_index(op.f('ix_progress_events_session_id'), 'progress_events', ['session_id'], unique=False)
    op.create_index(op.f('ix_progress_events_operation_id'), 'progress_events', ['operation_id'], unique=False)
    op.create_index(op.f('ix_progress_events_event_type'), 'progress_events', ['event_type'], unique=False)
    op.create_index(op.f('idx_progress_events_user_timestamp'), 'progress_events', ['user_id', 'timestamp'], unique=False)
    op.create_index(op.f('idx_progress_events_type_timestamp'), 'progress_events', ['event_type', 'timestamp'], unique=False)
    op.create_index(op.f('idx_progress_events_session_timestamp'), 'progress_events', ['session_id', 'timestamp'], unique=False)
    op.create_index(op.f('idx_progress_events_operation_timestamp'), 'progress_events', ['operation_id', 'timestamp'], unique=False)
    op.create_table('manga_metadata',
    sa.Column('manga_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('display_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('custom_cover_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('custom_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_organized', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('organization_format', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('last_organized_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_read_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('reading_status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('custom_metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['manga_id'], ['manga.id'], name=op.f('manga_metadata_manga_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('manga_metadata_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('manga_metadata_pkey')),
    sa.UniqueConstraint('manga_id', name=op.f('manga_metadata_manga_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('external_integrations',
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('integration_type', postgresql.ENUM('ANILIST', 'MYANIMELIST', 'KITSU', name='integrationtype'), autoincrement=False, nullable=False),
    sa.Column('client_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('client_secret', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('access_token', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('refresh_token', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('token_expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('external_user_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('external_username', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('sync_enabled', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('sync_reading_progress', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('sync_ratings', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('sync_status', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('auto_sync', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('last_sync_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_sync_status', postgresql.ENUM('PENDING', 'IN_PROGRESS', 'SUCCESS', 'FAILED', 'DISABLED', name='syncstatus'), autoincrement=False, nullable=False),
    sa.Column('last_sync_error', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('sync_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('settings', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('external_integrations_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('external_integrations_pkey')),
    sa.UniqueConstraint('user_id', 'integration_type', name=op.f('uq_user_integration_type'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('page',
    sa.Column('chapter_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('number', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('file_path', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('width', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('height', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['chapter_id'], ['chapter.id'], name=op.f('page_chapter_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('page_pkey'))
    )
    op.create_table('downloads',
    sa.Column('manga_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('chapter_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('download_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('source_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('client_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('external_download_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('download_url', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('magnet_link', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('torrent_hash', sa.VARCHAR(length=40), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('progress', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('total_size', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('downloaded_size', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('download_speed', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('eta', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('download_path', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('final_path', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('retry_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('max_retries', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['chapter_id'], ['chapter.id'], name=op.f('downloads_chapter_id_fkey')),
    sa.ForeignKeyConstraint(['client_id'], ['download_clients.id'], name=op.f('downloads_client_id_fkey')),
    sa.ForeignKeyConstraint(['manga_id'], ['manga.id'], name=op.f('downloads_manga_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('downloads_pkey'))
    )
    op.create_table('mangaupdates_entries',
    sa.Column('mu_series_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('mu_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('alternative_titles', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('cover_image_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('year', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('completed_year', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_nsfw', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('content_rating', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('genres', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('authors', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('publishers', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('rating', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('rating_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('latest_chapter', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('total_chapters', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('last_refreshed', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('auto_refresh_enabled', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('raw_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('mangaupdates_entries_pkey'))
    )
    op.create_index(op.f('ix_mangaupdates_entries_title'), 'mangaupdates_entries', ['title'], unique=False)
    op.create_index(op.f('ix_mangaupdates_entries_mu_series_id'), 'mangaupdates_entries', ['mu_series_id'], unique=True)
    op.create_table('download_clients',
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('client_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('implementation', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('host', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('port', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('use_ssl', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('username', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('password', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('api_key', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('settings', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_enabled', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('priority', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('default_category', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('download_path', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('last_test', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('is_healthy', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('download_clients_pkey'))
    )
    op.create_table('manga_author',
    sa.Column('manga_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('author_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['author_id'], ['author.id'], name=op.f('manga_author_author_id_fkey')),
    sa.ForeignKeyConstraint(['manga_id'], ['manga.id'], name=op.f('manga_author_manga_id_fkey')),
    sa.PrimaryKeyConstraint('manga_id', 'author_id', name=op.f('manga_author_pkey'))
    )
    op.create_table('users',
    sa.Column('username', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('hashed_password', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('full_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_superuser', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('two_fa_secret', sa.VARCHAR(length=32), autoincrement=False, nullable=True),
    sa.Column('two_fa_enabled', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('avatar', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('bio', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('anilist_username', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('myanimelist_username', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('provider_check_interval', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('theme', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('nsfw_blur', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('download_quality', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('download_path', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('naming_format_manga', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('naming_format_chapter', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('preferred_structure_pattern', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('auto_organize_imports', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('create_cbz_files', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('preserve_original_files', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('chapter_auto_refresh_interval', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('chapter_check_on_tab_focus', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('chapter_show_update_notifications', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('chapter_enable_manual_refresh', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('storage_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('max_upload_size', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('universal_manga_mappings',
    sa.Column('manga_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('universal_entry_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('confidence_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('mapping_source', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('verified_by_user', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('use_universal_metadata', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('use_universal_cover', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('preferred_indexer', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['manga_id'], ['manga.id'], name=op.f('universal_manga_mappings_manga_id_fkey')),
    sa.ForeignKeyConstraint(['universal_entry_id'], ['universal_manga_entries.id'], name=op.f('universal_manga_mappings_universal_entry_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('universal_manga_mappings_pkey'))
    )
    op.create_table('organization_history',
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('manga_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('chapter_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('operation_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('operation_status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('source_path', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('destination_path', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('backup_path', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('naming_format_used', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('files_processed', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('errors_encountered', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('warnings_encountered', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('duration_seconds', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('operation_details', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['chapter_id'], ['chapter.id'], name=op.f('organization_history_chapter_id_fkey')),
    sa.ForeignKeyConstraint(['manga_id'], ['manga.id'], name=op.f('organization_history_manga_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('organization_history_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('organization_history_pkey'))
    )
    op.create_table('cross_indexer_references',
    sa.Column('universal_entry_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('reference_indexer', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('reference_id', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('reference_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('confidence_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('match_method', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('verified_by_user', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('verification_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('additional_metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['universal_entry_id'], ['universal_manga_entries.id'], name=op.f('cross_indexer_references_universal_entry_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('cross_indexer_references_pkey')),
    sa.UniqueConstraint('universal_entry_id', 'reference_indexer', 'reference_id', name=op.f('uq_cross_reference'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('reading_progress',
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('manga_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('chapter_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('page', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_completed', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['chapter_id'], ['chapter.id'], name=op.f('reading_progress_chapter_id_fkey')),
    sa.ForeignKeyConstraint(['manga_id'], ['manga.id'], name=op.f('reading_progress_manga_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('reading_progress_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('reading_progress_pkey'))
    )
    op.create_table('manga',
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('alternative_titles', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('cover_image', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('type', postgresql.ENUM('MANGA', 'MANHUA', 'MANHWA', 'COMIC', 'UNKNOWN', name='mangatype'), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('ONGOING', 'COMPLETED', 'HIATUS', 'CANCELLED', 'UNKNOWN', name='mangastatus'), autoincrement=False, nullable=False),
    sa.Column('year', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_nsfw', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('provider', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('external_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('external_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('external_ids', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='manga_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_manga_title'), 'manga', ['title'], unique=False)
    op.create_index(op.f('ix_manga_provider'), 'manga', ['provider'], unique=False)
    op.create_index(op.f('ix_manga_external_id'), 'manga', ['external_id'], unique=False)
    op.create_table('bookmark',
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('manga_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('chapter_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('page', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['chapter_id'], ['chapter.id'], name=op.f('bookmark_chapter_id_fkey')),
    sa.ForeignKeyConstraint(['manga_id'], ['manga.id'], name=op.f('bookmark_manga_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('bookmark_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('bookmark_pkey'))
    )
    # ### end Alembic commands ###
